dirichlet
ddirichlet
dmulti
dmultinomial
dbinom
dmultinom
?dmultinom
ddirichlet
install.packages('lca')
install.packages('LCA')
library(LCA)
ddirichlet
install.packages('gtools')
library(gtools)
ddirichlet
rdirichlet(728, 584, 138)
?rdirichlet
rdirichlet(100, c(728, 584, 138))
plot(rdirichlet(100, c(728, 584, 138)))
?rbinom
728/(584)
728/(584+728)
?rbinom
728/(728+524)
728/(728+524+138)
?rdirichlet
density(draws)
draws
density(diff)
?density
density(diff)$bw
?approxfun
fn <- approxfun(density(diff)$x, density(diff)$y)
fn
integrate(fn, -Inf, Inf)
integrate(fn, -100, 100)
fn
fn <- approxfun(density(diff)$x, density(diff)$y, yleft = 0, yright=0)
integrate(fn, -100, 100)
integrate(fn, -Inf, Inf)
integrate(fn, -Inf, 0)
integrate(fn, 0, Inf)
head(precisions)
head(means)
head(means)
precisions
inv
5^-2
means
plot(means)
head(means)
head(means, 200)
plot(y = means)
hist(means)
ggplot(means) + geom_histogram())
ggplot(means) + geom_histogram()
ggplot(data.frame(x = means), aes(x)) + geom_histogram()
ggplot(data.frame(x = means), aes(x)) + geom_histogram(binwidth = .001)
chick.pdf
?density
quantile
quantile(chick.pdf, c(95))
quantile(chick.pdf, c(.95))
quantile(chick.pdf, c(0.95))
quantile(chick.pdf, c(.05, .95))
chick.pdf
install.packages('spatstat'')
install.packages('spatstat')
quantile(chick.pdf, c(.05, .95))
?quantile
quantile(chick.pdf, probs = c(.05, .95))
quantile(chick.pdf, probs = seq(.05, .95))
quantile(chick.pdf, probs = seq(0, 1, 0.25))
quantile(means.c - means.t, probs = seq(.05, .95))
quantile(means.c - means.t, probs = seq(.05, .95, .75))
quantile(means.c - means.t, probs = seq(.05))
quantile(means.c - means.t, probs = c(.05))
quantile(means.c - means.t, probs = c(.05, .10))
quantile(means.c - means.t, probs = c(.05, .10, .5))
quantile(means.c - means.t, probs = c(.05, .10, .5, .95))
quantile(means.c - means.t, probs = c(.025, .975))
install.packages('rmarkdown')
install.packages('EMCluster')
?approxfun
?rt
?rt
head(means.c.an)
length(means.c.an)
head(means.c)
head(means.c.an)
head(means.c.an, 200)
head(means.c, 200)
length(means.c)
length(means.c.an)
